{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAYtC,OAXgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EAEFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAKP,IAAMQ,EAAUC,SAASC,cAAc,uBACjCC,EAASF,SAASC,cAAc,sBAChCE,EAAWH,SAASC,cAAc,wBACzBD,SAASC,cAAc,QAE/BG,iBAAiB,UAAU,SAAAC,GAChCA,EAAMC,iBACN,IAAMC,EAAQC,OAAOT,EAAQU,OACvBC,EAAOF,OAAON,EAAOO,OACrBE,EAASH,OAAOL,EAASM,OAC/B,GAAID,OAAOD,GAAS,GAAKC,OAAOE,GAAQ,GAAKF,OAAOG,GAAU,EAC5DxB,EAAAyB,OAAOC,QAAQ,iCACV,GAAuB,IAAnBL,OAAOG,GAChBxB,EAAAyB,OAAOC,QAAQ,6BAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BzB,EAAcyB,EAAGP,EAAQG,EAAOI,GAC7BC,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBJ,EAAAyB,OAAOK,QAAQ,uBAA4CC,OAAnB5B,EAAW,EAAE,QAAY4B,OAAN3B,EAAM,M,IAElE4B,OAAM,SAAAH,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBJ,EAAAyB,OAAOQ,QAAQ,sBAAyCF,OAAnB5B,EAAW,EAAE,QAAY4B,OAAN3B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nconst delayEl = document.querySelector('input[name=\"delay\"]');\nconst stepEl = document.querySelector('input[name=\"step\"]');\nconst amountEl = document.querySelector('input[name=\"amount\"]');\nconst formEl = document.querySelector('form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n  const delay = Number(delayEl.value);\n  const step = Number(stepEl.value);\n  const amount = Number(amountEl.value);\n  if (Number(delay) < 0 || Number(step) < 0 || Number(amount) < 0) {\n    Notify.warning(\"Values can't be negative\");\n  } else if (Number(amount) === 0) {\n    Notify.warning(\"Amount can't be zero\");\n  } else {\n    for (let i = 0; i < amount; i++) {\n      createPromise(i, delay + step * i)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position + 1} in ${delay}ms`);\n        });\n    }\n  }\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","addEventListener","event","preventDefault","delay1","Number","value","step","amount","Notify","warning","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.d4c24e67.js.map"}